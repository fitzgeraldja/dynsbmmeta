setwd("/home/fitzgeraldj/Documents/main_project/confirmation/code/dynsbm_meta/dynsbmmeta/")
library(dynsbm)
library(dplyr)

# ret_best <- FALSE
nstarts <- 10



# A has count data, A_w has inverse n_au weighting per paper, so likely better to use Gaussian than Poisson
# NB as currently implemented will also load (but not parse into var) ref nets
files <- list.files(path="/home/fitzgeraldj/Documents/main_project/confirmation/code/dynsbm_meta/R_data/",pattern="^col.*\\.gzip$",full.names = TRUE)
nfiles <- length(files)
for (i in 1:nfiles){
  load(files[i])
}

col_A <- eval(parse(text="col_A"))
if (storage.mode(col_A)!= "integer") storage.mode(col_A) <- "integer"
# col_A_w <- eval(parse(text="col_A_w"))
# # NB need to take final 4 periods out of all 8 for metadata
# col_ages <- eval(parse(text="col_ages"))
# col_subjs <- eval(parse(text="col_subjs"))
# col_insts <- eval(parse(text="col_insts"))
# col_ages <- col_ages[5:8,,,drop=F]
# col_subjs <- col_subjs[5:8,,]
# col_insts <- col_insts[5:8,,]


# choose 21 on basis that Louvain found 27 groups, but effective number was only 21, so most could be absorbed
# don't have time to run for other options
Qmin <- 26
Qmax <- 26

list.dynsbm = list()
best.icls = list()

ptm <- proc.time() # start timing
results <- select.dynsbm(Y = col_A, Qmin = Qmin, Qmax = Qmax, edge.type = "binary", nb.cores = 30, nstart = nstarts, iter.max = 30) # note default is 25 starts, 20 iterations max, but on average only need a few iterations
ttime <- proc.time() - ptm # stop the clock
print("Time to run wo metadata for Colombian authors")
print(ttime)
# print(paste("Best ICL: ",
#             max(sapply(results, function(x) compute.icl(x,meta.types = c("poisson",                                                                                                    "independent bernoulli x 24",
#                                                                          "independent bernoulli x 149"                                                                                  ))))))

if (ret_best) print(paste("Ran",results[[1]]$iter,"iterations"))
# for (res in results){
#   list.dynsbm[[length(list.dynsbm)+1]]=res
# }



# to save
Q <- Qmin

for (i in 1:length(list.dynsbm)){
  memb <- list.dynsbm[[i]]$membership
  trans <- list.dynsbm[[i]]$trans
  beta <- list.dynsbm[[i]]$beta
  # icl <- lapply(list.dynsbm, function(x) compute.icl(x,meta.types = c("poisson",                                                                                                    "independent bernoulli x 24",
  #                                                                         "independent bernoulli x 149"                                                                                  )))
  # age_params <- lapply(list.dynsbm, function(x) x$varphi[[1]])
  # subj_params <- lapply(list.dynsbm, function(x) x$varphi[[2]])
  # inst_params <- lapply(list.dynsbm, function(x) x$varphi[[3]])
  
  
  print("Attempting to save...")
  save(memb,file="/home/fitzgeraldj/Documents/main_project/confirmation/code/dynsbm_meta/R_data/ocol_au_Z_full.Rdata")
  save(trans,file="/home/fitzgeraldj/Documents/main_project/confirmation/code/dynsbm_meta/R_data/ocol_au_trans_full.Rdata")
  # save(icl,file="/home/fitzgeraldj/Documents/main_project/confirmation/code/dynsbm_meta/R_data/ocol_au_icl_full.Rdata")
  save(beta,file="/home/fitzgeraldj/Documents/main_project/confirmation/code/dynsbm_meta/R_data/ocol_au_beta_full.Rdata")
  save(ttime,file="/home/fitzgeraldj/Documents/main_project/confirmation/code/dynsbm_meta/R_data/ocol_au_ttime.Rdata")
  print("Success")
  Q <- Q + 1
}



