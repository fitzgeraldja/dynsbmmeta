
setwd("/home/fitzgeraldj/Documents/main_project/confirmation/code/dynsbm_meta/dynsbmmeta/")
library(dynsbmmeta)
library(dynsbm)
library(dplyr)

# utility function to compute icl for old model without metadata
compute.oldicl <- function(dynsbm,X,metatypes=c("poisson","independent bernoulli")){
  T <- ncol(dynsbm$membership)
  Q <- nrow(dynsbm$trans)
  N <- nrow(dynsbm$membership)
  pen <- 0.5*Q*log(N*(N-1)*T/2) + 0.25*Q*(Q-1)*T*log(N*(N-1)/2)
  # must also penalise for not describing metadata
  # assume just fit all metadata (i) overall, or (ii) within each timeslice with MLE, so discard
  # network information and don't try and fit subgroups of metadata
  pen1 <- pen
  pen2 <- pen
  tot_lkl <- 0.0
  T_lkl <- 0.0
  for (s in 1:length(metatypes)){
    if (metatypes[[s]]=="poisson"){
      tot_lam <- mean(X[[s]])
      tot_lkl <- tot_lkl + sum(dpois(X[[s]],tot_lam,log=TRUE))
      for (t in 1:T){
        t_lam <- mean(X[[s]][t,,])
        t_lkl <- sum(dpois(X[[s]][t,,],t_lam,log=TRUE))
        T_lkl <- T_lkl + t_lkl
      }
      pen1 <- pen1 + 0.5*log(N*T)
      pen2 <- pen2 + 0.5*T*log(N)
    }else if (metatypes[[s]]=="independent bernoulli"){
      tot_lkl <- tot_lkl + sum(log(colMeans(X[[s]],dims=2)))
      for (t in 1:T){
        t_lkl <- sum(log(colMeans(X[[s]][t,,],dims=1)))
        T_lkl <- T_lkl + t_lkl
      }
      pen1 <- pen1 + 0.5*log(N*T)*dim(X[[s]])[3]
      pen2 <-pen2 + 0.5*T*log(N)*dim(X[[s]])[3]
    }
  }
  base <- dynsbm$loglikelihood- ifelse(T>1,0.5*Q*(Q-1)*log(N*(T-1)),0)
  return(c(base+tot_lkl-pen1,base+T_lkl-pen2))
}

# scaling tests are 300-321
start_test <- 300
end_test <- 312
ret_best <- FALSE
nstarts <- 20


for (testno in start_test:end_test){
  files <- list.files(path="/home/fitzgeraldj/Documents/main_project/confirmation/code/dynsbm_meta/R_data/",pattern=paste("^test",testno,".*\\.gzip$",sep=""),full.names = TRUE)
  nfiles <- length(files)
  for (i in 1:nfiles){
    load(files[i])
  }
  
  test_A <- eval(parse(text=paste("test",testno,"_R_A_data",sep="")))
  test_X_bern <- eval(parse(text=paste("test",testno,"_R_X_indep_bern_data",sep="")))
  test_X_pois <- eval(parse(text=paste("test",testno,"_R_X_poisson_data",sep="")))
  
  # save time by just using right number of groups directly
  N = dim(test_A)[2]
  Qmin = as.integer(ceiling(log(N)))
  Qmax = as.integer(ceiling(log(N)))
  # list.dynsbmmeta = list()
  # best.icls = list()
  print(paste("Test",testno))
  print(paste("N =",N,"; Q =",Qmin))
  
  ptm <- proc.time() # start timing
  results <- select.dynsbmmeta(Y = test_A, X = append(list(test_X_bern),list(test_X_pois)), Qmin = Qmin, Qmax = Qmax, edge.type = "binary", meta.types = c("independent bernoulli x 4","poisson"), meta.tuning=c(1), nb.cores = 20, nstart = nstarts, iter.max = 30,
                               ret_best = ret_best,
                               return.marginals=TRUE) # note default is 25 starts, 20 iterations max, but on average only need a few iterations
  ttime <- proc.time() - ptm # stop the clock
  print(paste("Time to run w metadata for test ",testno,":",sep=""))
  print(ttime)
  print(paste("Best ICL: ",
              max(sapply(results, function(x) compute.icl(x,meta.types = c("independent bernoulli x 4","poisson"))))))
  
  if (ret_best) print(paste("Ran",results[[1]]$iter,"iterations"))
  # for (res in results){
  #   list.dynsbmmeta[[length(list.dynsbmmeta)+1]]=res
  # }
  print("Attempting to save...")
  save(ttime,file=paste("/home/fitzgeraldj/Documents/main_project/confirmation/code/dynsbm_meta/R_data/test",testno,"_ttime.Rdata",sep=""))
  print("Success")
  
  print("Now running original model...")
  ptm <- proc.time() # start timing
  results <- select.dynsbm(Y = test_A, Qmin = Qmin, Qmax = Qmax, edge.type = "binary", nb.cores = 20, nstart = nstarts, iter.max = 30) # note default is 25 starts, 20 iterations max, but on average only need a few iterations
  ttime <- proc.time() - ptm # stop the clock
  print(paste("Time to run wo metadata for test ",testno,":",sep=""))
  print(ttime)
  print(paste("Best ICL: ",
              max(sapply(results, function(x) compute.oldicl(x,X = append(list(test_X_bern),list(test_X_pois)),metatypes = c("independent bernoulli x 4","poisson"))))))
  
  if (ret_best) print(paste("Ran",results[[1]]$iter,"iterations"))
  
  print("Attempting to save...")
  save(ttime,file=paste("/home/fitzgeraldj/Documents/main_project/confirmation/code/dynsbm_meta/R_data/otest",testno,"_ttime.Rdata",sep=""))
  print("Success")
  
  
  
  
  # to save
  # Q <- Qmin
  # if (ret_best){
  #   for (i in 1:length(list.dynsbmmeta)){
  #     memb <- list.dynsbmmeta[[i]]$membership
  #     trans <- list.dynsbmmeta[[i]]$trans
  #     icl <- compute.icl(list.dynsbmmeta[[i]],meta.types = c("independent bernoulli x 4","poisson"))
  #     bern_params <- list.dynsbmmeta[[i]]$varphi[[1]]
  #     pois_params <- list.dynsbmmeta[[i]]$varphi[[2]]
  #     
  #     # save(memb,file=paste("/home/fitzgeraldj/Documents/main_project/confirmation/code/dynsbm_meta/R_data/test",testno,"_q",Q,"_Z.Rdata",sep=""))
  #     # save(trans,file=paste("/home/fitzgeraldj/Documents/main_project/confirmation/code/dynsbm_meta/R_data/test",testno,"_q",Q,"_trans.Rdata",sep=""))
  #     # save(icl,file=paste("/home/fitzgeraldj/Documents/main_project/confirmation/code/dynsbm_meta/R_data/test",testno,"_q",Q,"_icl.Rdata",sep=""))
  #     # save(bern_params,file=paste("/home/fitzgeraldj/Documents/main_project/confirmation/code/dynsbm_meta/R_data/test",testno,"_q",Q,"_bernp.Rdata",sep=""))
  #     # save(pois_params,file=paste("/home/fitzgeraldj/Documents/main_project/confirmation/code/dynsbm_meta/R_data/test",testno,"_q",Q,"_poisp.Rdata",sep=""))
  #     # print(paste("Success for test",testno))
  #     Q <- Q + 1
  #   }
  # }else{
  #   memb <- lapply(list.dynsbmmeta, function(x) x$membership)
  #   trans <- lapply(list.dynsbmmeta, function(x) x$trans)
  #   icl <- lapply(list.dynsbmmeta, function(x) compute.icl(x,meta.types = c("independent bernoulli x 4","poisson")))
  #   bern_params <- lapply(list.dynsbmmeta, function(x) x$varphi[[1]])
  #   pois_params <- lapply(list.dynsbmmeta, function(x) x$varphi[[2]])
  #   taum <- lapply(list.dynsbmmeta, function(x) x$taum)
  #   beta <- lapply(list.dynsbmmeta, function(x) x$beta)
  #   
  #   save(memb,file=paste("/home/fitzgeraldj/Documents/main_project/confirmation/code/dynsbm_meta/R_data/test",testno,"_linkpred_Z_full.Rdata",sep=""))
  #   save(trans,file=paste("/home/fitzgeraldj/Documents/main_project/confirmation/code/dynsbm_meta/R_data/test",testno,"_linkpred_trans_full.Rdata",sep=""))
  #   save(icl,file=paste("/home/fitzgeraldj/Documents/main_project/confirmation/code/dynsbm_meta/R_data/test",testno,"_linkpred_icl_full.Rdata",sep=""))
  #   save(bern_params,file=paste("/home/fitzgeraldj/Documents/main_project/confirmation/code/dynsbm_meta/R_data/test",testno,"_linkpred_bernp_full.Rdata",sep=""))
  #   save(pois_params,file=paste("/home/fitzgeraldj/Documents/main_project/confirmation/code/dynsbm_meta/R_data/test",testno,"_linkpred_poisp_full.Rdata",sep=""))
  #   save(taum,file=paste("/home/fitzgeraldj/Documents/main_project/confirmation/code/dynsbm_meta/R_data/test",testno,"_linkpred_taum_full.Rdata",sep=""))
  #   save(beta,file=paste("/home/fitzgeraldj/Documents/main_project/confirmation/code/dynsbm_meta/R_data/test",testno,"_linkpred_beta_full.Rdata",sep=""))
  #   
  # }
  
  
}

