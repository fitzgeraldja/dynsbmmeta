# test 1
setwd("/home/fitzgeraldj/Documents/main_project/confirmation/code/dynsbm_meta/dynsbmmeta/")
library(dynsbmmeta)
library(dplyr)

# NB done for tests after 12 on proper data

ntests <- 42
start_test <- 25
end_test <- 42
mult_samps <- TRUE
n_samps <- 20
ret_best <- FALSE
easiest <- FALSE
tuning <- FALSE
tungap <- 0.1
if(easiest){
  if(!tuning){
    nstarts <- 40  
  }else{
    nstarts <- 20
  }
}else{
  nstarts <- 25
}

for (testno in start_test:end_test){
  if (easiest){
    testno <- "000"
  }
  files <- list.files(path="/home/fitzgeraldj/Documents/main_project/confirmation/code/dynsbm_meta/R_data/",pattern=paste("^test",testno,".*\\.gzip$",sep=""),full.names = TRUE)
  nfiles <- length(files)
  for (i in 1:nfiles){
    load(files[i])
  }

  test_A <- eval(parse(text=paste("test",testno,"_R_A_data",sep="")))
  test_X_bern <- eval(parse(text=paste("test",testno,"_R_X_indep_bern_data",sep="")))
  test_X_pois <- eval(parse(text=paste("test",testno,"_R_X_poisson_data",sep="")))
  
  # save time by just using right number of groups directly
  if (!easiest){
    if (testno<=9){
      Qmin = 4
      Qmax = 4
    }else if (between(testno,10,12)){
      # scaling tests
      Qmin = 6 + (testno-10)*(testno-9)
      Qmax = 6 + (testno-10)*(testno-9)
    }else {
      # reproducing OG tests
      Qmin = 2
      Qmax = 2
    }
  }else{
    Qmin = 2
    Qmax = 2
  }
  
  if (!tuning){
    ptm <- proc.time() # start timing
    if (length(dim(test_A))!=4){
      test_X <- append(list(test_X_bern),list(test_X_pois))
      list.dynsbmmeta <- select.dynsbmmeta(Y = test_A, X = test_X, Qmin = Qmin, Qmax = Qmax, edge.type = "binary", meta.types = c("independent bernoulli x 4","poisson"), meta.tuning=c(1.0), nb.cores = 20, nstart = nstarts, iter.max = 30,
                                           ret_best = ret_best) # note default is 25 starts, 20 iterations max, but on average only need a few iterations
      
      if (ret_best) print(paste("Ran",list.dynsbmmeta[[1]]$iter,"iterations"))
    }else{
      results <- list()
      full_test_A <- test_A 
      full_X_bern <- test_X_bern
      full_X_pois <- test_X_pois
      for (samp_no in 1:n_samps){
        test_A <- full_test_A[samp_no,,,]
        X_bern <- full_X_bern[samp_no,,,]
        X_pois <- full_X_pois[samp_no,,,]
        dim(X_pois) <- c(dim(X_pois),1)
        test_X <- append(list(X_bern),list(X_pois))
        print(paste("At sample",samp_no))
        list.dynsbmmeta <- select.dynsbmmeta(Y = test_A, X = test_X, Qmin = Qmin, Qmax = Qmax, edge.type = "binary", meta.types = c("independent bernoulli x 4","poisson"), meta.tuning=c(1.0), nb.cores = 20, nstart = nstarts, iter.max = 30,
                                             ret_best = ret_best) # note default is 25 starts, 20 iterations max, but on average only need a few iterations
        
        if (ret_best) print(paste("Ran",list.dynsbmmeta[[1]]$iter,"iterations"))
        
        results<-append(results,list.dynsbmmeta)
      }
    }
    ttime <- proc.time() - ptm # stop the clock
    print(paste("Time to run w metadata for test ",testno,":",sep=""))
    print(ttime)
  }else{
    for (tun.param in seq(from=1,to=0,by=-tungap)){
      ptm <- proc.time() # start timing
      list.dynsbmmeta <- select.dynsbmmeta(Y = test_A, X = append(list(test_X_bern),list(test_X_pois)), Qmin = Qmin, Qmax = Qmax, edge.type = "binary", meta.types = c("independent bernoulli x 4","poisson"), meta.tuning=c(tun.param), nb.cores = 20, nstart = nstarts, iter.max = 30,
                                           ret_best = ret_best) # note default is 25 starts, 20 iterations max, but on average only need a few iterations
      ttime <- proc.time() - ptm # stop the clock
      print(paste("Time to run w metadata tuning param ",tun.param," for test ",testno,":",sep=""))
      print(ttime)
      print(paste("Best ICL: ",
                  max(sapply(list.dynsbmmeta, function(x) compute.icl(x,meta.types = c("independent bernoulli x 4","poisson"))))))
            
      if (ret_best) print(paste("Ran",list.dynsbmmeta[[1]]$iter,"iterations"))
    }
  }
    
  # to save
  Q <- Qmin
  if (ret_best){
    for (i in 1:length(list.dynsbmmeta)){
      memb <- list.dynsbmmeta[[i]]$membership
      trans <- list.dynsbmmeta[[i]]$trans
      icl <- compute.icl(list.dynsbmmeta[[i]],meta.types = c("independent bernoulli x 4","poisson"))
      bern_params <- list.dynsbmmeta[[i]]$varphi[[1]]
      pois_params <- list.dynsbmmeta[[i]]$varphi[[2]]
      
      save(memb,file=paste("/home/fitzgeraldj/Documents/main_project/confirmation/code/dynsbm_meta/R_data/test",testno,"_q",Q,"_Z.Rdata",sep=""))
      save(trans,file=paste("/home/fitzgeraldj/Documents/main_project/confirmation/code/dynsbm_meta/R_data/test",testno,"_q",Q,"_trans.Rdata",sep=""))
      save(icl,file=paste("/home/fitzgeraldj/Documents/main_project/confirmation/code/dynsbm_meta/R_data/test",testno,"_q",Q,"_icl.Rdata",sep=""))
      save(bern_params,file=paste("/home/fitzgeraldj/Documents/main_project/confirmation/code/dynsbm_meta/R_data/test",testno,"_q",Q,"_bernp.Rdata",sep=""))
      save(pois_params,file=paste("/home/fitzgeraldj/Documents/main_project/confirmation/code/dynsbm_meta/R_data/test",testno,"_q",Q,"_poisp.Rdata",sep=""))
      # print(paste("Success for test",testno))
      Q <- Q + 1
    }
  }else{
    if (!mult_samps|length(dim(test_X_bern))!=4){
      memb <- lapply(list.dynsbmmeta, function(x) x$membership)
      trans <- lapply(list.dynsbmmeta, function(x) x$trans)
      icl <- lapply(list.dynsbmmeta, function(x) compute.icl(x,meta.types = c("independent bernoulli x 4","poisson")))
      bern_params <- lapply(list.dynsbmmeta, function(x) x$varphi[[1]])
      pois_params <- lapply(list.dynsbmmeta, function(x) x$varphi[[2]])
    }else{
      memb <- lapply(results, function(x) x$membership)
      trans <- lapply(results, function(x) x$trans)
      icl <- lapply(results, function(x) compute.icl(x,meta.types = c("independent bernoulli x 4","poisson")))
      bern_params <- lapply(results, function(x) x$varphi[[1]])
      pois_params <- lapply(results, function(x) x$varphi[[2]])
    }
    save(memb,file=paste("/home/fitzgeraldj/Documents/main_project/confirmation/code/dynsbm_meta/R_data/test",testno,"_q",Q,"_Z_full.Rdata",sep=""))
    save(trans,file=paste("/home/fitzgeraldj/Documents/main_project/confirmation/code/dynsbm_meta/R_data/test",testno,"_q",Q,"_trans_full.Rdata",sep=""))
    save(icl,file=paste("/home/fitzgeraldj/Documents/main_project/confirmation/code/dynsbm_meta/R_data/test",testno,"_q",Q,"_icl_full.Rdata",sep=""))
    save(bern_params,file=paste("/home/fitzgeraldj/Documents/main_project/confirmation/code/dynsbm_meta/R_data/test",testno,"_q",Q,"_bernp_full.Rdata",sep=""))
    save(pois_params,file=paste("/home/fitzgeraldj/Documents/main_project/confirmation/code/dynsbm_meta/R_data/test",testno,"_q",Q,"_poisp_full.Rdata",sep=""))
  }
  
  save(ttime,file=paste("/home/fitzgeraldj/Documents/main_project/confirmation/code/dynsbm_meta/R_data/test",testno,"_ttime.Rdata",sep=""))
  print("Saved results successfully.")
  if (easiest){
    break
  }
  Sys.sleep(3)
}

