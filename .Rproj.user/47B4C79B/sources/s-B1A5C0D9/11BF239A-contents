setwd("/home/fitzgeraldj/Documents/main_project/confirmation/code/dynsbm_meta/dynsbmmeta/")
library(dynsbm)

# utility function to compute icl for old model without metadata
compute.oldicl <- function(dynsbm,X,metatypes=c("poisson","independent bernoulli")){
  T <- ncol(dynsbm$membership)
  Q <- nrow(dynsbm$trans)
  N <- nrow(dynsbm$membership)
  pen <- 0.5*Q*log(N*(N-1)*T/2) + 0.25*Q*(Q-1)*T*log(N*(N-1)/2)
  # must also penalise for not describing metadata
  # assume just fit all metadata (i) overall, or (ii) within each timeslice with MLE, so discard
  # network information and don't try and fit subgroups of metadata
  pen1 <- pen
  pen2 <- pen
  tot_lkl <- 0.0
  T_lkl <- 0.0
  for (s in 1:length(metatypes)){
    if (metatypes[[s]]=="poisson"){
      tot_lam <- mean(X[[s]])
      tot_lkl <- tot_lkl + sum(dpois(X[[s]],tot_lam,log=TRUE))
      for (t in 1:T){
        t_lam <- mean(X[[s]][t,,])
        t_lkl <- sum(dpois(X[[s]][t,,],t_lam,log=TRUE))
        T_lkl <- T_lkl + t_lkl
      }
      pen1 <- pen1 + 0.5*log(N*T)
      pen2 <- pen2 + 0.5*T*log(N)
    }else if (metatypes[[s]]=="independent bernoulli"){
      tot_lkl <- tot_lkl + sum(log(colMeans(X[[s]],dims=2)))
      for (t in 1:T){
        t_lkl <- sum(log(colMeans(X[[s]][t,,],dims=1)))
        T_lkl <- T_lkl + t_lkl
      }
      pen1 <- pen1 + 0.5*log(N*T)*dim(X[[s]])[3]
      pen2 <-pen2 + 0.5*T*log(N)*dim(X[[s]])[3]
    }
  }
  base <- dynsbm$loglikelihood- ifelse(T>1,0.5*Q*(Q-1)*log(N*(T-1)),0)
  return(c(base+tot_lkl-pen1,base+T_lkl-pen2))
}

ntests <- 42
file_dir<-"/home/fitzgeraldj/Documents/main_project/confirmation/code/dynsbm_meta/R_data/"
print(paste("Looking for files in",file_dir))
start_test <- 29
end_test <- 42
mult_samps <- TRUE
n_samps <- 20

easiest <- FALSE
if (easiest){
  nstarts <- 50
}else{
  nstarts <- 25
}

for (testno in start_test:end_test){
  if (easiest){
    testno <- "000"
  }
  patt <- paste("^test",testno,".*\\.gzip$",sep="")
  # print(paste("Using pattern:",patt))
  files <- list.files(path=file_dir,pattern=patt,full.names = TRUE)
  nfiles <- length(files)
  for (i in 1:nfiles){
    load(files[i])
  }
  # save time by just using right number of groups directly
  if (!easiest){
    if (testno<=9){
      Qmin = 4
      Qmax = 4
    }else if (between(testno,10,12)){
      # scaling tests
      Qmin = 6 + (testno-10)*(testno-9)
      Qmax = 6 + (testno-10)*(testno-9)
    }else {
      # reproducing OG tests
      Qmin = 2
      Qmax = 2
    }
  }else{
    Qmin = 2
    Qmax = 2
  }
  
  test_A <- eval(parse(text=paste("test",testno,"_R_A_data",sep="")))
  test_X_bern <- eval(parse(text=paste("test",testno,"_R_X_indep_bern_data",sep="")))
  test_X_pois <- eval(parse(text=paste("test",testno,"_R_X_poisson_data",sep="")))
  
  
  
  ptm <- proc.time() # start timing
  if (length(dim(test_A))!=4){
    list.dynsbm <- select.dynsbm(Y = test_A, Qmin = Qmin, Qmax = Qmax, edge.type = "binary", nb.cores = 20, nstart = nstarts, iter.max = 30) # note default is 25 starts, 20 iterations max, but looks like only need a few iterations on average
    ttime <- proc.time()-ptm # stop the clock
    print(paste("Time to run wo metadata for test ",testno,":",sep=""))
    print(ttime)
    print(paste("Ran",list.dynsbm[[1]]$iter,"iterations"))
  }else{
    full_test_A <- test_A
    results <- list()
    for (samp_no in 1:n_samps){
      print(paste("At sample",samp_no))
      test_A <- full_test_A[samp_no,,,]
      list.dynsbm <- select.dynsbm(Y = test_A, Qmin = Qmin, Qmax = Qmax, edge.type = "binary", nb.cores = 20, nstart = nstarts, iter.max = 30) # note default is 25 starts, 20 iterations max, but looks like only need a few iterations on average
      results <- append(results,list.dynsbm)
      # print(paste("Ran",list.dynsbm[[1]]$iter,"iterations"))
    }
    ttime <- proc.time()-ptm # stop the clock
    print(paste("Time to run wo metadata for test ",testno,":",sep=""))
    print(ttime)
  }
  
  
  # to save
  Q <- Qmin
  for (i in 1:length(list.dynsbm)){
    if (!mult_samps|length(dim(test_X_bern))!=4){
      memb <- list.dynsbm[[i]]$membership
      trans <- list.dynsbm[[i]]$trans
      test_X <- append(list(test_X_bern),list(test_X_pois))
      icl <- compute.oldicl(list.dynsbm[[i]],test_X,c("independent bernoulli","poisson"))
    }else{
      memb <- lapply(results, function(x) x$membership)
      trans <- lapply(results, function(x) x$trans)
      test_Xs <- list()
      for (samp_no in 1:n_samps){
        X_pois <- test_X_pois[samp_no,,,]
        dim(X_pois) <- c(dim(X_pois),1)
        test_Xs[[length(test_Xs)+1]] <- append(list(test_X_bern[samp_no,,,]),list(X_pois))
      }
      icl <- lapply(1:n_samps, function(x) compute.oldicl(results[[x]],test_Xs[[x]],c("independent bernoulli","poisson")))
    }
    save(memb,file=paste("/home/fitzgeraldj/Documents/main_project/confirmation/code/dynsbm_meta/R_data/otest",testno,"_q",Q,"_Z.Rdata",sep=""))
    save(trans,file=paste("/home/fitzgeraldj/Documents/main_project/confirmation/code/dynsbm_meta/R_data/otest",testno,"_q",Q,"_trans.Rdata",sep=""))
    save(icl,file=paste("/home/fitzgeraldj/Documents/main_project/confirmation/code/dynsbm_meta/R_data/otest",testno,"_q",Q,"_icl.Rdata",sep=""))
    Q <- Q + 1
  }
  save(ttime,file=paste("/home/fitzgeraldj/Documents/main_project/confirmation/code/dynsbm_meta/R_data/otest",testno,"_ttime.Rdata",sep=""))
  print("Saved successfully")
  if (easiest){
    break
  }
  Sys.sleep(3)
}


